View(trainData)
myFormula <- Group ~ type_+bread+vegetables+fruits+meat+poultru+milk+wine+Group
df_ctree <- ctree(myFormula, data=trainData)
install.packages("partykit")
my_data
myFormula <- Group ~ type_+bread+vegetables+fruits+meat+poultru+milk+wine+Group
df_ctree <- ctree(myFormula, data=trainData)
df_ctree
my_data
myFormula <- Group ~ type_+bread+vegetables+fruits+meat+poultru+milk+wine+Group
df_ctree <- ctree(myFormula, data=trainData)
df_ctree
#_________________
install.packages("vctrs")
install.packages("vctrs")
install.packages('tibble', repos = 'http://cran.rstudio.com/', type = 'source')
library(klaR)
table.01 <- read.table("eda.csv", header = TRUE,";", dec=',', fileEncoding="cp1251");table.01
install.packages("tibble", repos = "http://cran.rstudio.com/", type = "source")
my_data<-table.01;my_data
groups
my_data$Group<- c(as.factor(groups))
table.01 <- read.table("eda.csv", header = TRUE,";", dec=',', fileEncoding="cp1251");table.01
table.02 <- scale(table.01[,3:9], center = TRUE, scale = TRUE);table.02
table.02<-table.01[,-1];table.02
table.02<-table.02[,-1];table.02
df3<-table.01; df3
maxs <- apply(table.02, 2, max);maxs
mins <- apply(table.02, 2, min);mins
table.02 <- scale(table.02, center = mins, scale = maxs - mins); table.02
n_<-table.01$n_; n_
type_<-table.01$type_; type_
table.02<-data.frame(n_, type_, table.02);table.02
dist.table <- dist(table.02 [,3:9]); dist.table
clust.city <- hclust(dist.table); clust.city
plot(clust.city, labels = table.01$type_,main="Дендрограмма",ylab="Cходство",xlab="fdd")
k = 4
rect.hclust(clust.city, k = 4, border="red")
abline(h = 1.5, col = "blue", lwd='3') # h - horizontal line, col - color
plot(clust.city$height, type='b',xlab="Номер компоненты",ylab = "Собственное значение")
#  Разделим Страны на 4 кластера
#  Вектор groups содержит номер кластера, в который попал классифицируемый объект
groups <- cutree(clust.city, k) ; groups
table.01[groups==1, 2]
table.01[groups==2, 2]
table.01[groups==3, 2]
table.01[groups==4, 2]
g1<-colMeans(table.01[groups==1, 3:9]);g1
g2<-colMeans(table.01[groups==2, 3:9]);g2
g3<-colMeans(table.01[groups==3, 3:9]);g3
g4<-colMeans(table.01[groups==4, 3:9]);g4
g11<-colMeans(table.02[groups==1, 3:9]);g11
g12<-colMeans(table.02[groups==2, 3:9]);g12
g13<-colMeans(table.02[groups==3, 3:9]);g13
g14<-colMeans(table.02[groups==4, 3:9]);g14
df<-data.frame(g1,g2,g3,g4); df
df2<-data.frame(g11,g12,g13,g14);df2
df1<-t(df2); df1
barplot(as.matrix(df2), col=c("magenta","red", "grey", "yellow","blue","green","orange"))
legend("topleft",cex=0.6, rownames(df2),fill=c("magenta","red", "grey","yellow","blue","green","orange") )
barplot(df1[,1], ylim=range(pretty(c(0,max(df1[,1])))),
main="Хлеб",
col=c("red","yellow","blue","green"))
barplot(df1[,2], ylim=range(pretty(c(0,max(df1[,2])))),
main="Овощи",
col=c("red","yellow","blue","green"))
barplot(df1[,3], ylim=range(pretty(c(0,max(df1[,3])))),
main="Фрукты",
col=c("red","yellow","blue","green"))
barplot(df1[,4], ylim=range(pretty(c(0,max(df1[,4])))),
main="Мясо",
col=c("red","yellow","blue","green"))
barplot(df1[,5], ylim=range(pretty(c(0,max(df1[,5])))),
main="Птица",
col=c("red","yellow","blue","green"))
barplot(df1[,6], ylim=range(pretty(c(0,max(df1[,6])))),
main="Молоко",
col=c("red","yellow","blue","green"))
barplot(df1[,7], ylim=range(pretty(c(0,max(df1[,7])))),
main="Вино",
col=c("red","yellow","blue","green"))
df3["Group"]<-groups;df3
library(lattice)
xyplot(fruits ~ vegetables,group = Group, data = df3,auto.key = TRUE,pch = 20,cex = 1.5)
boxplot(bread~Group , data =df3, ylab = "Хлеб", frame = FALSE, col = rainbow(4))
boxplot(meat~Group , data =df3, ylab = "Мясо", frame = FALSE, col = rainbow(4))
boxplot(vegetables~Group , data =df3, ylab = "Мясо", frame = FALSE, col = rainbow(4))
xyplot(wine~meat+vegetables|Group,data=df3, grid = T, auto.key=TRUE,pch = 20,cex = 1.5)
cloud(bread~meat*vegetables, group = Group, data = df3, auto.key = TRUE,pch = 20,cex = 1.5)
packages <- c('ggplot2', 'dplyr', 'tidyr', 'tibble')
df3 %>%
ggplot(aes(vegetables, fruits, color=Group))+geom_point()
df3 %>%
ggplot(aes(vegetables, fruits, color=Group))+geom_point()
packages <- c('ggplot2', 'dplyr', 'tidyr', 'tibble')
install.packages(packages)
install.packages(packages)
library(ggplot2)
library(dplyr)
library(tidyr)
library(tibble)
df3 %>%
ggplot(aes(vegetables, fruits, color=Group))+geom_point()
#_________________
install.packages("vctrs")
install.packages("vctrs")
install.packages("vctrs")
install.packages("vctrs")
install.packages("vctrs")
#_________________
install.packages("vctrs")
install.packages("vctrs")
install.packages("vctrs")
install.packages("vctrs")
#_________________
#install.packages("vctrs")
install.packages('tibble', repos = 'http://cran.rstudio.com/', type = 'source')
#_________________
#install.packages("vctrs")
install.packages('tibble', repos = 'http://cran.rstudio.com/', type = 'source')
library(klaR)
install.packages("tibble", repos = "http://cran.rstudio.com/", type = "source")
install.packages("tibble", repos = "http://cran.rstudio.com/", type = "source")
install.packages("tibble", repos = "http://cran.rstudio.com/", type = "source")
install.packages("tibble", repos = "http://cran.rstudio.com/", type = "source")
table.01 <- read.table("eda.csv", header = TRUE,";", dec=',', fileEncoding="cp1251");table.01
my_data<-table.01;my_data
groups
my_data$Group<- c(as.factor(groups))
naive_df <- NaiveBayes(my_data$Group ~ ., data = my_data)
naive_df$tables
naive_df$tables$Work
naive_df
#делаем графики по байсу
opar=par()
opar
layout(matrix(c(1,2,3,4), 2, 2))
plot(naive_df, lwd = 2, legendplot = FALSE)
legend("topleft",lty=1:3, cex=0.5)
#восстановление
par=opar
set.seed(1234)
ind <- sample(2, nrow(my_data), replace=TRUE, prob=c(0.7, 0.3));ind
trainData <- my_data[ind==1,];trainData
testData <- my_data[ind==2,];testData
nrow(trainData)
nrow(testData)
nrow(my_data)
install.packages("partykit")
library(party)
myFormula <- Group ~ type_+bread+vegetables+fruits+meat+poultru+milk+wine+Group
df_ctree <- ctree(myFormula, data=trainData)
install.packages("partykit")
library(partykit)
install.packages("party")
library(party)
my_data
myFormula <- Group ~ type_+bread+vegetables+fruits+meat+poultru+milk+wine+Group
set.seed(1234)
ind <- sample(2, nrow(my_data), replace=TRUE, prob=c(0.7, 0.3));ind
trainData <- my_data[ind==1,];trainData
testData <- my_data[ind==2,];testData
nrow(trainData)
nrow(testData)
nrow(my_data)
my_data
myFormula <- Group ~ type_+bread+vegetables+fruits+meat+poultru+milk+wine+Group
df_ctree <- ctree(myFormula, data=trainData)
my_data
myFormula <- Group ~ type_+bread+vegetables +fruits +meat +poultry +milk +wine
df_ctree <- ctree(myFormula, data=trainData)
df_ctree <- ctree(myFormula, data=trainData);df_ctree
table(predict(df_ctree), trainData$Group)
predict(df_ctree)
plot(predict(df_ctree))
set.seed(1234)
ind <- sample(2, nrow(my_data), replace=TRUE, prob=c(0.7, 0.3));ind
trainData <- my_data[ind==1,];trainData
testData <- my_data[ind==2,];testData
table.01 <- read.table("eda.csv", header = TRUE,";", dec=',', fileEncoding="cp1251");table.01
my_data<-table.01;my_data
groups
my_data$Group<- c(as.factor(groups))
naive_df <- NaiveBayes(my_data$Group ~ ., data = my_data)
naive_df$tables
naive_df$tables$Work
naive_df
#делаем графики по байсу
opar=par()
opar
layout(matrix(c(1,2,3,4), 2, 2))
plot(naive_df, lwd = 2, legendplot = FALSE)
legend("topleft",lty=1:3, cex=0.5)
#восстановление
par=opar
set.seed(1234)
ind <- sample(2, nrow(my_data), replace=TRUE, prob=c(0.7, 0.3));ind
trainData <- my_data[ind==1,];trainData
testData <- my_data[ind==2,];testData
set.seed(1234)
ind <- sample(2, nrow(my_data), replace=TRUE, prob=c(0.7, 0.3));ind
trainData <- my_data[ind==1,];trainData
testData <- my_data[ind==2,];testData
nrow(trainData)
nrow(testData)
nrow(my_data)
install.packages("partykit")
install.packages("partykit")
my_data
myFormula <- Group ~ type_+bread+vegetables +fruits +meat +poultry +milk +wine
df_ctree <- ctree(myFormula, data=trainData);df_ctree
table(predict(df_ctree), trainData$Group)
predict(df_ctree)
plot(predict(df_ctree))
plot(df_ctree)
library(randomForest)
rf <- randomForest(Group ~ .,data=trainData, ntree=100, proximity=TRUE)
table(predict(rf), trainData$Group)
print(rf)
my_data
myFormula <- Group ~ type_+bread+vegetables +fruits +meat +poultry +milk +wine
df_ctree <- ctree(myFormula, data=trainData);df_ctree
table(predict(df_ctree), trainData$Group)
predict(df_ctree)
plot(predict(df_ctree))
myFormula <- Group ~ type_+bread+vegetables
myFormula <- Group ~ type_+bread+vegetables; myFormula
df_ctree <- ctree(myFormula, data=trainData);df_ctree
table(predict(df_ctree), trainData$Group)
table.01 <- read.table("eda.csv", header = TRUE,";", dec=',', fileEncoding="cp1251");table.01
table.02 <- scale(table.01[,3:9], center = TRUE, scale = TRUE);table.02
table.02<-table.01[,-1];table.02
table.02<-table.02[,-1];table.02
df3<-table.01; df3
maxs <- apply(table.02, 2, max);maxs
mins <- apply(table.02, 2, min);mins
table.02 <- scale(table.02, center = mins, scale = maxs - mins); table.02
n_<-table.01$n_; n_
type_<-table.01$type_; type_
table.02<-data.frame(n_, type_, table.02);table.02
dist.table <- dist(table.02 [,3:9]); dist.table
clust.city <- hclust(dist.table); clust.city
plot(clust.city, labels = table.01$type_,main="Дендрограмма",ylab="Cходство",xlab="fdd")
k = 4
rect.hclust(clust.city, k = 4, border="red")
abline(h = 1.5, col = "blue", lwd='3') # h - horizontal line, col - color
plot(clust.city$height, type='b',xlab="Номер компоненты",ylab = "Собственное значение")
#  Разделим Страны на 4 кластера
#  Вектор groups содержит номер кластера, в который попал классифицируемый объект
groups <- cutree(clust.city, k) ; groups
table.01[groups==1, 2]
table.01[groups==2, 2]
table.01[groups==3, 2]
table.01[groups==4, 2]
g1<-colMeans(table.01[groups==1, 3:9]);g1
g2<-colMeans(table.01[groups==2, 3:9]);g2
g3<-colMeans(table.01[groups==3, 3:9]);g3
g4<-colMeans(table.01[groups==4, 3:9]);g4
g11<-colMeans(table.02[groups==1, 3:9]);g11
g12<-colMeans(table.02[groups==2, 3:9]);g12
g13<-colMeans(table.02[groups==3, 3:9]);g13
g14<-colMeans(table.02[groups==4, 3:9]);g14
df<-data.frame(g1,g2,g3,g4); df
df2<-data.frame(g11,g12,g13,g14);df2
df1<-t(df2); df1
barplot(as.matrix(df2), col=c("magenta","red", "grey", "yellow","blue","green","orange"))
legend("topleft",cex=0.6, rownames(df2),fill=c("magenta","red", "grey","yellow","blue","green","orange") )
barplot(df1[,1], ylim=range(pretty(c(0,max(df1[,1])))),
main="Хлеб",
col=c("red","yellow","blue","green"))
barplot(df1[,2], ylim=range(pretty(c(0,max(df1[,2])))),
main="Овощи",
col=c("red","yellow","blue","green"))
barplot(df1[,3], ylim=range(pretty(c(0,max(df1[,3])))),
main="Фрукты",
col=c("red","yellow","blue","green"))
barplot(df1[,4], ylim=range(pretty(c(0,max(df1[,4])))),
main="Мясо",
col=c("red","yellow","blue","green"))
barplot(df1[,5], ylim=range(pretty(c(0,max(df1[,5])))),
main="Птица",
col=c("red","yellow","blue","green"))
barplot(df1[,6], ylim=range(pretty(c(0,max(df1[,6])))),
main="Молоко",
col=c("red","yellow","blue","green"))
barplot(df1[,7], ylim=range(pretty(c(0,max(df1[,7])))),
main="Вино",
col=c("red","yellow","blue","green"))
df3["Group"]<-groups;df3
library(lattice)
xyplot(fruits ~ vegetables,group = Group, data = df3,auto.key = TRUE,pch = 20,cex = 1.5)
boxplot(bread~Group , data =df3, ylab = "Хлеб", frame = FALSE, col = rainbow(4))
boxplot(meat~Group , data =df3, ylab = "Мясо", frame = FALSE, col = rainbow(4))
boxplot(vegetables~Group , data =df3, ylab = "Мясо", frame = FALSE, col = rainbow(4))
xyplot(wine~meat+vegetables|Group,data=df3, grid = T, auto.key=TRUE,pch = 20,cex = 1.5)
cloud(bread~meat*vegetables, group = Group, data = df3, auto.key = TRUE,pch = 20,cex = 1.5)
packages <- c('ggplot2', 'dplyr', 'tidyr', 'tibble')
df3 %>%
ggplot(aes(vegetables, fruits, color=Group))+geom_point()
table.01 <- read.table("eda.csv", header = TRUE,";", dec=',', fileEncoding="cp1251");table.01
my_data<-table.01;my_data
groups
my_data$Group<- c(as.factor(groups))
naive_df <- NaiveBayes(my_data$Group ~ ., data = my_data)
#naive_df <- NaiveBayes(my_data$Group ~ ., data = my_data)
naive_df$tables
naive_df <- NaiveBayes(my_data$Group ~ ., data = my_data)
naive_df$tables
naive_df$tables$Work
naive_df
#делаем графики по байсу
opar=par()
opar
layout(matrix(c(1,2,3,4), 2, 2))
plot(naive_df, lwd = 2, legendplot = FALSE)
legend("topleft",lty=1:3, cex=0.5)
#восстановление
par=opar
set.seed(1234)
ind <- sample(2, nrow(my_data), replace=TRUE, prob=c(0.7, 0.3));ind
trainData <- my_data[ind==1,];trainData
testData <- my_data[ind==2,];testData
nrow(trainData)
nrow(testData)
nrow(my_data)
install.packages("partykit")
install.packages("partykit")
df<-read.csv("C:/Users/valen/Documents/athlete_events.csv", sep=",", header=TRUE); df
v<-c("Name", "Sex", "Weight", "Sport")
df1<-df[which(df[, "Sport"]=="Badminton"), v]; df1
View(df)
df<-read.csv("C:/Users/valen/Documents/athlete_events.csv", sep=",", header=TRUE); df
v<-c("Name", "Sex", "Weight", "Sport")
df1<-df[which(df[, "Sport"]=="Badminton"), v]; df1
df1<-df1[-which(is.na(df1[, "Weight"])),]; df1
df_M<-df1[which(df[, "Sex"]=="M"), v]; df_M
View(df_M)
View(df_M)
View(df1)
View(df1)
x<-df1[1:nrow(df1), "Weight"]; x
View(df1)
View(df1)
df_M<-df1[df['Sex'] == 'M']; df_M
df_M<-df1[df1['Sex'] == 'M']; df_M
df_M<-df1[df1[,'Sex'] == 'M']; df_M
df<-read.csv("C:/Users/valen/Documents/athlete_events.csv", sep=",", header=TRUE); df
v<-c("Name", "Sex", "Weight", "Sport")
df1<-df[which(df[, "Sport"]=="Badminton"), v]; df1
df1<-df1[-which(is.na(df1[, "Weight"])),]; df1
dfM<-df1[which(df1[, "Sex"]=="F"), v]; dfM
View(dfM)
View(dfM)
dfF<-df1[which(df1[, "Sex"]=="F"), v]; dfF
dfM<-df1[which(df1[, "Sex"]=="M"), v]; dfM
x<-dfM[1:nrow(df1), "Weight"]; x
y<-dfF[1:nrow(df1), "Weight"]; y
df<-read.csv("C:/Users/valen/Documents/athlete_events.csv", sep=",", header=TRUE); df
v<-c("Name", "Sex", "Weight", "Sport")
df1<-df[which(df[, "Sport"]=="Badminton"), v]; df1
df1<-df1[-which(is.na(df1[, "Weight"])),]; df1
dfF<-df1[which(df1[, "Sex"]=="F"), v]; dfF
dfM<-df1[which(df1[, "Sex"]=="M"), v]; dfM
x<-dfM[1:nrow(df1), "Weight"]; x
y<-dfF[1:nrow(df1), "Weight"]; y
# Тест Стьюдента для мужчин
t.test(x, mu=mean(x), conf.int=TRUE)
t.test(x, mu=80, conf.int=TRUE)
# Тест Стьюдента для женщин
t.test(y, mu=mean(y), conf.int=TRUE)
t.test(y, mu=60, conf.int=TRUE)
mean(x)
mean(y)
View(df1)
View(df1)
df_filtered <- na.omit(df1[, v])
View(df_filtered)
View(df_filtered)
df1<-df1[-which(is.na(df1[, "Weight"])),]; df1
View(df1)
View(df1)
df<-read.csv("C:/Users/valen/Documents/athlete_events.csv", sep=",", header=TRUE); df
v<-c("Name", "Sex", "Weight", "Sport")
df1<-df[which(df[, "Sport"]=="Badminton"), v]; df1
df1<-df1[-which(is.na(df1[, "Weight"])),]; df1
View(df1)
dfF<-df1[which(df1[, "Sex"]=="F"), v]; dfF
View(dfF)
dfM<-df1[which(df1[, "Sex"]=="M"), v]; dfM
View(dfM)
x<-dfM[1:nrow(df1), "Weight"]; x
x <- na.omit(x[, v])
x<-dfM[1:nrow(df1), "Weight"]; x
x <- na.omit(x[, v])
x <- na.omit(x [, v])
x<-dfM[1:nrow(df1), "Weight"]; x
df<-read.csv("C:/Users/valen/Documents/athlete_events.csv", sep=",", header=TRUE); df
v<-c("Name", "Sex", "Weight", "Sport")
df1<-df[which(df[, "Sport"]=="Badminton"), v]; df1
df1<-df1[-which(is.na(df1[, "Weight"])),]; df1
dfF<-df1[which(df1[, "Sex"]=="F"), v]; dfF
dfM<-df1[which(df1[, "Sex"]=="M"), v]; dfM
x<-dfM[1:nrow(df1), "Weight"]; x
x <- na.omit(x);x
df<-read.csv("C:/Users/valen/Documents/athlete_events.csv", sep=",", header=TRUE); df
v<-c("Name", "Sex", "Weight", "Sport")
df1<-df[which(df[, "Sport"]=="Badminton"), v]; df1
df1<-df1[-which(is.na(df1[, "Weight"])),]; df1
View(df1)
x<-df1[1:nrow(df1), "Weight"]; x
df<-read.csv("C:/Users/valen/Documents/athlete_events.csv", sep=",", header=TRUE); df
v<-c("Name", "Sex", "Weight", "Sport")
df1<-df[which(df[, "Sport"]=="Badminton" & df[, "Sex"] == "M"), v]; df1
df1<-df1[-which(is.na(df1[, "Weight"])),]; df1
x<-df1[1:nrow(df1), "Weight"]; x
v <- c("Name", "Sex", "Weight", "Sport")
df1 <- df[which(df[, "Sex"] == "M"), v]
df1 <- df1[-which(is.na(df1[, "Weight"])), ]
df<-read.csv("C:/Users/valen/Documents/athlete_events.csv", sep=",", header=TRUE); df
v<-c("Name", "Sex", "Weight", "Sport")
df1<-df[which(df[, "Sport"]=="Badminton" & df[, "Sex"] == "M"), v]; df1
df1<-df1[-which(is.na(df1[, "Weight"])),]; df1
x<-df1[1:nrow(df1), "Weight"]; x
# Тест Стьюдента для мужчин
t.test(x, mu=mean(x), conf.int=TRUE)
t.test(x, mu=80, conf.int=TRUE)
df<-read.csv("C:/Users/valen/Documents/athlete_events.csv", sep=",", header=TRUE); df
v<-c("Name", "Sex", "Weight", "Sport")
df1<-df[which(df[, "Sport"]=="Badminton" & df[, "Sex"] == "F"), v]; df1
df1<-df1[-which(is.na(df1[, "Weight"])),]; df1
x<-df1[1:nrow(df1), "Weight"]; x
df<-read.csv("C:/Users/valen/Documents/athlete_events.csv", sep=",", header=TRUE); df
v<-c("Name", "Sex", "Weight", "Sport")
df1<-df[which(df[, "Sport"]=="Badminton" & df[, "Sex"] == "F"), v]; df1
df1<-df1[-which(is.na(df1[, "Weight"])),]; df1
x<-df1[1:nrow(df1), "Weight"]; x
# Тест Стьюдента для женщин
t.test(x, mu=mean(x), conf.int=TRUE)
t.test(x, mu=60, conf.int=TRUE)
df<-read.csv("C:/Users/valen/Documents/athlete_events.csv", sep=",", header=TRUE); df
v<-c("Name", "Sex", "Weight", "Sport")
df1<-df[which(df[, "Sport"]=="Badminton" & df[, "Sex"] == "M"), v]; df1
df1<-df1[-which(is.na(df1[, "Weight"])),]; df1
x<-df1[1:nrow(df1), "Weight"]; x
# Тест Стьюдента для мужчин
t.test(x, mu=mean(x), conf.int=TRUE)
t.test(x, mu=80, conf.int=TRUE)
df<-read.csv("C:/Users/valen/Documents/athlete_events.csv", sep=",", header=TRUE); df
v<-c("Name", "Sex", "Weight", "Sport")
df1<-df[which(df[, "Sport"]=="Badminton" & df[, "Sex"] == "F"), v]; df1
df1<-df1[-which(is.na(df1[, "Weight"])),]; df1
x<-df1[1:nrow(df1), "Weight"]; x
# Тест Стьюдента для женщин
t.test(x, mu=mean(x), conf.int=TRUE)
t.test(x, mu=60, conf.int=TRUE)
# для работы остального
df<-read.csv("C:/Users/valen/Documents/athlete_events.csv", sep=",", header=TRUE); df
v<-c("Name", "Sex", "Weight", "Sport")
df1<-df[which(df[, "Sport"]=="Badminton"), v]; df1
df1<-df1[-which(is.na(df1[, "Weight"])),]; df1
x<-df1[1:nrow(df1), "Weight"]; x
# Тест Уилкоксона
wilcox.test(x, mu=mean(x), conf.int=TRUE)
wilcox.test(x, mu=60, conf.int=TRUE)
# для работы остального
df<-read.csv("C:/Users/valen/Documents/athlete_events.csv", sep=",", header=TRUE); df
v<-c("Name", "Sex", "Weight", "Sport")
df1<-df[which(df[, "Sport"]=="Badminton"), v]; df1
df1<-df1[-which(is.na(df1[, "Weight"])),]; df1
x<-df1[1:nrow(df1), "Weight"]; x
# Тест Уилкоксона
wilcox.test(x, mu=mean(x), conf.int=TRUE)
wilcox.test(x, mu=60, conf.int=TRUE)
# Проверка на нормальность распределения.
# Тест Шапиро-Уилкса (Shapiro-Wilk test).
shapiro.test(x)
# Графический способ.
# Гистограмма с линией плотности.
x2<-seq(min(x), max(x), length=length(x))
fun<-dnorm(x2, mean=mean(x), sd=sd(x))
hist(x, freq=FALSE, col="gray")
lines(x2, fun, col=2, lwd=2)
# Квантильно-квантильный график.
qqnorm(x)
qqline(x, col=4, lwd=2)
df3<-df[which(df[, "Sport"]=="Football"), v];df3
df3<-df3[-which(is.na(df3[, "Weight"])),];df3
df3<-df3[which(df3[, "Sex"]=="F"),];df3
x3<-df3[1:nrow(df3), "Weight"];df3
# Тест Шапиро-Уилкса (Shapiro-Wilk test).
shapiro.test(x3)
# Квантильно-квантильный график.
qqnorm(x3)
qqline(x3, col=4, lwd=2)
df2<-df[which(df[, "Sport"]%in%c("Badminton", "Football")), v]; df2
df2<-df2[-which(is.na(df2[, "Weight"])),]
df2<-df2[which(df2[, "Sex"]=="F"),]
df2$Sport <- as.factor(df2$Sport)
df2$Sport<-droplevels(df2$Sport)
x<-df2[1:4999, "Weight"]
x
shapiro.test(x)
qqnorm(x)
qqline(x, col=4, lwd=2)
# Сравнение двух независимых выборок.
tapply(df2$Weight, df2$Sport, mean)
fligner.test(df2$Weight~df2$Sport, df2)
#различаются ли эти средние значения статистически, проверим на
#основе гипотезы об отсутствии разницы при помощи t-теста:
df2$Weight
t.test(df2$Weight~df2$Sport)
t.test(df2$Weight~df2$Sport, paired=FALSE, var.equal=TRUE)
